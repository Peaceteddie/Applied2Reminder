@page "/{selectedsource?}"
@using System.Linq
@using Applied2Reminder
@using Microsoft.EntityFrameworkCore
@using Xunit
@rendermode InteractiveServer
<PageTitle>Home</PageTitle>

<CreateJob ShouldShow="@CreateOpen" ClearShouldShow="@(async (bool submitted) => await Refresh(submitted))" />
<CompanyJobs Source="@Source" ClearSourceCallback="@(()=> Source = null)" />

<main class="container flex h-full">
    <div class="container flex flex-col w-full">
        <h1 class="flex self-center text-5xl">Home</h1>
        <div class="flex justify-center my-4 w-full">
            <InputText @bind-Value="Search" @oninput="SearchSource" placeholder="Search"
                class="outline outline-slate-400 p-4 pe-16 rounded-full self-center w-1/2" />
            <div class=" flex">
                <button
                    class="absolute bg-white outline outline-slate-400 rounded-full size-14 text-3xl -translate-x-full z-10">🔎</button>
                <button
                    class="absolute bg-white outline outline-slate-400 rounded-full self-center size-24 text-4xl -translate-x-8"
                    @onclick="@(()=> CreateOpen = true)">+</button>
            </div>
        </div>
        <div class="flex h-16 place-items-center place-self-center">
            <label for="SourceTypeCheckbox" class="p-2 rounded-full"
                style="@(!IsChecked && !IsIndeterminate ? "background-color: #aaf;":"")">Recruiter</label>
            <div>
                <input type="checkbox" indeterminate="@IsIndeterminate.ToString().ToLower()"
                    value="@IsChecked.ToString().ToLower()" />
                <button id="SourceTypeCheckbox" @onclick="HandleCheckboxClick">
                </button>
            </div>
            <label for="SourceTypeCheckbox" class="p-2 rounded-full"
                style="@(IsChecked && !IsIndeterminate ? "background-color: #faa;" : "")">Company</label>
            <style>
                @@scope {
                    input[type="checkbox"] {
                        display: none;
                    }

                    button {
                        background-color: #ddd;
                        border-radius: 1rem;
                        display: inline-block;
                        height: 2rem;
                        position: relative;
                        width: 4rem;
                    }

                    button::after {
                        background-color: #fff;
                        border-radius: 50%;
                        content: "";
                        display: block;
                        height: 1.5rem;
                        left: 0.25rem;
                        position: absolute;
                        top: 0.25rem;
                        transition: transform 0.3s;
                        width: 1.5rem;
                    }

                    input[value="true"][indeterminate="false"]+button::after {
                        background-color: #faa;
                        transform: translateX(2rem);
                    }

                    input[indeterminate="true"]+button::after {
                        transform: translateX(1rem);
                    }

                    input[value="false"][indeterminate="false"]+button::after {
                        background-color: #aaf;
                        transform: translateX(0rem);
                    }
                }
            </style>
        </div>
        <div class="container flex h-full self-center">
            @if (FilteredJobSources is not null || JobSources is not null)
            {
                <ul class="place-content-start flex flex-row flex-wrap gap-10">
                    @foreach (var source in PriorityCollection())
                    {
                        <li class="cursor-pointer flex m-auto place-content-center place-items-center rounded-full size-40 text-center text-xl shadow-lg"
                            @onclick="@(()=> ShowDetails(source))" style="background-color:@(getColor(source));">
                            @source.Name
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</main>

@code {
    [Parameter] public string? SelectedSource { get; set; }

    bool IsChecked = false;
    bool CreateOpen { get; set; }
    bool IsIndeterminate = true;
    string? Search { get; set; }

    JobSource? Source { get; set; }
    List<JobSource>? JobSources { get; set; }
    List<JobSource>? FilteredJobSources { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using AppliedDbContext context = new();
        JobSources = await context.JobSources.OrderBy(s => s.Name).ToListAsync();

        if (Search?.Trim() is not null or "")
            FilteredJobSources = JobSources.Where(s => s.Name.Contains(Search, StringComparison.OrdinalIgnoreCase)).ToList();
    }
    protected override void OnParametersSet()
    {
        if (Search is not null)
        {
            FilteredJobSources = JobSources?.Where(s => s.Name.Contains(Search, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else if (SelectedSource is not null)
        {
            Source = JobSources?.FirstOrDefault(s => string.Equals(s.Name, SelectedSource, StringComparison.OrdinalIgnoreCase));
        }
    }

    async Task Refresh(bool submitted)
    {
        CreateOpen = false;
        if (submitted)
        {
            await OnInitializedAsync();
            StateHasChanged();
        }

    }

    void HandleCheckboxClick(MouseEventArgs _)
    {
        IsChecked = IsIndeterminate ? !IsChecked : IsChecked;
        IsIndeterminate = !IsIndeterminate;
        StateHasChanged();
    }
    void SearchSource()
    {
        FilteredJobSources = !string.IsNullOrEmpty(Search)
        ? JobSources?.Where(s => s.Name.Contains(Search, StringComparison.OrdinalIgnoreCase)).ToList()
        : null;
    }
    void ShowDetails(JobSource source)
    {
        Source = source;
        StateHasChanged();
    }

    IEnumerable<JobSource> PriorityCollection()
    {
        return FilteredJobSources?.DistinctBy(f => f.Name)
        ?? JobSources?.DistinctBy(s => s.Name)
        ?? new List<JobSource>();
    }

    string getColor(JobSource source)
    {
        switch (source.SourceType)
        {
            case Applied2Reminder.JobSources.Company:
                return "#faa";
            case Applied2Reminder.JobSources.Recruiter:
                return "#aaf";
            default:
                return "#eee";
        }
    }
}
