@using Microsoft.EntityFrameworkCore
@if (Source is not null)
{
    <div class="absolute flex size-full z-20" style="background-color:#6666;"
        @onclick="@((e) =>{if(!IsInsideModal){Source = null; ClearSourceCallback.InvokeAsync().Wait();}})">
        <dialog class="absolute flex place-self-center rounded-3xl size-2/3 top-20"
            @onmouseenter="@((e) => IsInsideModal = true)" @onmouseleave="@((e) => IsInsideModal = false)" open>
            <div class="flex flex-col p-4 pb-10 w-full">
                <h1 class="flex place-content-center text-center">@Source.Name</h1>
                <div class="container flex flex-row size-full">
                    <div class="flex flex-col w-1/3">
                        <h2 class="text-center text-3xl">Applications</h2>

                        <div class="flex px-4 self-start">
                            <InputText @bind-Value="Search" placeholder="Search" @oninput="SearchApplications"
                                class="outline outline-slate-400 p-4 pe-16 rounded-full self-center" />

                            <div class=" flex">
                                <button
                                    class="absolute bg-white outline outline-slate-400 rounded-full size-14 text-3xl -translate-x-full z-10"
                                    @onclick="SearchApplications">ðŸ”Ž</button>
                            </div>
                        </div>

                        <ul class="flex flex-col gap-4 items-center max-h-full overflow-y-auto py-5"
                            style="direction:rtl;mask:linear-gradient(0deg, #0000, #000 5%, #000 95%, #0000);scrollbar-width:thin;">
                            @if (Applications is not null)
                            {
                                int i = 0;
                                @foreach (var application in PriorityCollection())
                                {
                                    <li class="content-center max-h-40 min-h-40 min-w-40 max-w-40 cursor-pointer rounded-full text-center text-xl shadow-lg"
                                        @onclick="()=> ShowDetails(application)"
                                        style="background-color:@(getColor(i++));direction:ltr;">
                                        @application.Name
                                    </li>
                                }
                            }
                        </ul>
                    </div>

                    <div class="outline p-10 rounded-3xl size-full">
                        @if (JobApplication is not null)
                        {
                            <div>
                                <h1>@JobApplication.Name</h1>
                                <p>@JobApplication.JobDescription</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </dialog>
    </div>

    <style>
        body {
            overflow: hidden;
        }
    </style>
}


@code {
    [Parameter] public JobSource? Source { get; set; }
    [Parameter] public EventCallback ClearSourceCallback { get; set; }

    bool IsInsideModal { get; set; }
    private Timer? Timer { get; set; }
    private string? Search { get; set; }
    private ElementReference? Modal { get; set; }
    private Application? JobApplication { get; set; }
    private List<Application>? Applications { get; set; }
    private List<Application>? FilteredApplications { get; set; }

    protected override async Task OnInitializedAsync()
    => await GetApplicationsAsync();
    private async Task GetApplicationsAsync()
    {
        if (Source is not null)
        {
            using AppliedDbContext context = new();
            Applications = await context.Applications.Where(a => a.JobSource.Id == Source.Id).ToListAsync();
        }
    }
    protected override async Task OnParametersSetAsync()
    => await GetApplicationsAsync();
    private IEnumerable<Application> PriorityCollection()
    => FilteredApplications ?? Applications ?? [];
    private void ShowDetails(Application application)
    => JobApplication = application;
    void SearchApplications()
    => FilteredApplications = Search != null ? Applications?.Where(a => a.Name.Contains(Search,
    StringComparison.OrdinalIgnoreCase)).ToList() : [];
    private string getColor(int index)
    => $"hsl({(index * 36) % 360}, 100%, 85%)";
}