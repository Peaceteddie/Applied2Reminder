@rendermode InteractiveServer
@if (ShouldShow)
{
    <Overlay class="flex" @onclick="@(() => ShouldShow = IsInsideModal)">
        <dialog class="flex flex-col p-1 rounded-xl translate-y-10 w-2/6" @onmouseenter="@(() => IsInsideModal = true)"
            @onmouseleave="@(() => IsInsideModal = false)" open>
            <header class="border-b-4 border-slate-400 content-center flex h-full p-2 place-content-between ">
                <h2 class="flex self-center text-2xl text-ellipsis text-nowrap w-2/5">
                    New Application
                </h2>
                <div class="flex h-full mx-auto place-content-center place-self-center w-2/5">
                    <label class="flex place-items-center w-full">
                        <span class="flex flex-1 place-content-start" style="@RecruiterStyle">Recruiter</span>
                        <InputCheckbox @bind-Value="IsCompanyType" class="flex flex-shrink-1" />
                        <span class="flex flex-1 place-content-end" style="@CompanyStyle">Company</span>
                    </label>
                </div>
                <style>
                    @@scope {
                        input[type="checkbox"] {
                            appearance: none;
                            -webkit-appearance: none;
                            -moz-appearance: none;
                            width: 40px;
                            height: 20px;
                            background-color: #aaf;
                            position: relative;
                            border-radius: 20px;
                            transition: background-color 0.3s;
                        }

                        input[type="checkbox"]::after {
                            content: '';
                            position:
                                absolute;
                            width: 18px;
                            height: 18px;
                            border-radius: 50%;
                            background-color: white;
                            top: 1px;
                            left:
                                1px;
                            transition: left 0.3s;
                        }

                        input[type="checkbox"]:checked {
                            background-color: #faa;
                        }

                        input[type="checkbox"]:checked::after {
                            left: 20px;
                        }
                    }
                </style>
                <div class="flex place-content-end w-2/5">
                    <button class="my-auto me-6 flex place-items-center rounded-full border p-3"
                        @onclick="@(() => ShouldShow = false)">‚ùå</button>
                </div>
            </header>
            <EditForm class="border-b-4 border-slate-400  p-6" Model="Application" OnValidSubmit="CreateApplication">
                <ValidationSummary />
                <label class="flex flex-col gap-4 pb-4">Job details:
                    <div class="flex">
                        <InputText @bind-Value="Application!.Name" placeholder="(Required) Job Name..."
                            class="@InputClass" />
                    </div>
                    <div class="flex">
                        <InputTextArea @bind-Value="Application.Description" placeholder="(Optional) Job Description..."
                            class="@InputClass" />
                    </div>
                    <div class="flex">
                        <InputText @bind-Value="Application!.Url" placeholder="(Optional) Job Url..." class="@InputClass" />
                    </div>
                </label>
                <label class="flex flex-col gap-4 pt-4">Company details:

                    <div class="flex">
                        <InputText @bind-Value="Application!.Source!.Name" placeholder="(Required) Company Name..."
                            class="@InputClass" />
                    </div>
                    <div class="flex">
                        <InputTextArea @bind-Value="Application!.Source!.Description" class="@InputClass"
                            placeholder="(Optional) Company Description..." />
                    </div>
                    <div class="flex">
                        <InputText @bind-Value="Application!.Source!.Url" placeholder="(Optional) Company Url..."
                            class="@InputClass" />
                    </div>
                </label>
                <style>
                    @@scope {
                        input {
                            border: .1rem;
                            border-style: inset;
                        }

                        select {
                            border: .1rem;
                            border-style: inset;
                        }

                        textarea {
                            border: .1rem;
                            border-style: inset;
                        }
                    }
                </style>
            </EditForm>
            <footer class="flex flex-1 h-full p-2 place-content-end">
                <button class="bg-slate-400 border-4 border-slate-400 flex p-2 rounded-full text-white"
                    @onclick="@(() => ShouldShow = false)">Cancel</button>
                <button class="bg-slate-400 border-4 border-slate-400 flex p-2 rounded-full text-white"
                    type="submit">Create</button>
            </footer>
            <style>
                @@scope {
                    & {
                        background-color: @(IsCompanyType ? "#fee" : "#eef");
                    }
                }
            </style>
        </dialog>
    </Overlay>
}
@code {
    [Parameter] public bool ShouldShow { get; set; }
    [Parameter] public EventCallback ClearShouldShow { get; set; }
    private Application? Application { get; set; } = new();
    private bool IsInsideModal { get; set; }
    private async Task CreateApplication()
    {
        if (Application is null) return;
        using AppliedDbContext context = new();
        context.Applications.Add(Application);
        await context.SaveChangesAsync();
        await ClearShouldShow.InvokeAsync();
    }
    string InputClass = "flex flex-1 p-4";
    private bool IsCompanyType
    {
        get => Application?.Source?.SourceType == JobSources.Company;
        set
        {
            if (Application is not null)
            {
                Application!.Source!.SourceType = value ? JobSources.Company : JobSources.Recruiter;
            }
        }
    }
    string CompanyStyle
    => IsCompanyType
    ? @"
color:#f00;
font-size:1.2rem;
"
    : @"
color:#000;
font-size:1rem;
";
    string RecruiterStyle
    => IsCompanyType
    ? @"
color:#000;
font-size:1rem;
"
    : @"
color:#00f;
font-size:1.2rem;
";
}